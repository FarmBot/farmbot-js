var e=require("mqtt");function n(e,n){return Object.keys(n).forEach(function(t){"default"===t||"__esModule"===t||e.hasOwnProperty(t)||Object.defineProperty(e,t,{enumerable:!0,get:function(){return n[t]}})}),e}function t(e,n,t,r){Object.defineProperty(e,n,{get:t,set:r,enumerable:!0,configurable:!0})}var r=globalThis,o={},i={},s=r.parcelRequire1c57;null==s&&((s=function(e){if(e in o)return o[e].exports;if(e in i){var n=i[e];delete i[e];var t={id:e,exports:{}};return o[e]=t,n.call(t.exports,t,t.exports),t.exports}var r=Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}).register=function(e,n){i[e]=n},r.parcelRequire1c57=s);var a=s.register;a("gwFY1",function(e,t){var r=s("h19jY"),o=s("fTGM0"),i=s("3tZ8P"),a=s("jOzD0"),c=s("bFr0L");n(e.exports,r),n(e.exports,o),n(e.exports,i),n(e.exports,a),n(e.exports,c)}),a("h19jY",function(e,n){t(e.exports,"LATEST_VERSION",()=>r),t(e.exports,"DIGITAL",()=>o),t(e.exports,"ANALOG",()=>i);// THIS INTERFACE WAS AUTO GENERATED ON 2023-07-27
// DO NOT EDIT THIS FILE.
// IT WILL BE OVERWRITTEN ON EVERY CELERYSCRIPT UPGRADE.
var r=20180209,o=0,i=1}),a("fTGM0",function(n,r){t(n.exports,"Farmbot",()=>m),s("jOzD0");var o=s("01gfL"),i=s("8i5S2"),a=s("iwcyJ");s("gwFY1");var c=s("jOzD0"),u=s("f5H0j"),f=s("dPMce"),d=s("7tZ6d"),p=s("byyGl"),l=s("aWv1W"),o=s("01gfL"),m=/** @class */function(){function n(t){var r=this;/** Get a Farmbot Constructor Parameter. */this.getConfig=function(e){return r.config[e]},/** Set a Farmbot Constructor Parameter. */this.setConfig=function(e,n){r.config[e]=n},/**
         * Installs a "Farmware" (plugin) onto the bot's SD card.
         * URL must point to a valid Farmware manifest JSON document.
         */this.installFarmware=function(e){return r.send((0,o.rpcRequest)([{kind:"install_farmware",args:{url:e}}]))},/**
         * Checks for updates on a particular Farmware plugin when given the name of
         * a Farmware. `updateFarmware("take-photo")`
         */this.updateFarmware=function(e){return r.send((0,o.rpcRequest)([{kind:"update_farmware",args:{package:e}}]))},/** Uninstall a Farmware plugin. */this.removeFarmware=function(e){return r.send((0,o.rpcRequest)([{kind:"remove_farmware",args:{package:e}}]))},/**
         * Installs "Farmware" (plugins) authored by FarmBot, Inc.
         * onto the bot's SD card.
         */this.installFirstPartyFarmware=function(){return r.send((0,o.rpcRequest)([{kind:"install_first_party_farmware",args:{}}]))},/**
         * Deactivate FarmBot OS completely (shutdown).
         * Useful before unplugging the power.
         */this.powerOff=function(){return r.send((0,o.rpcRequest)([{kind:"power_off",args:{}}]))},/** Restart FarmBot OS. */this.reboot=function(){return r.send((0,o.rpcRequest)([{kind:"reboot",args:{package:"farmbot_os"}}]))},/** Reinitialize the FarmBot microcontroller firmware. */this.rebootFirmware=function(){return r.send((0,o.rpcRequest)([{kind:"reboot",args:{package:"arduino_firmware"}}]))},/** Check for new versions of FarmBot OS.
         * Downloads and installs if available. */this.checkUpdates=function(){return r.send((0,o.rpcRequest)([{kind:"check_updates",args:{package:"farmbot_os"}}]))},/** THIS WILL RESET THE SD CARD, deleting all non-factory data!
         * Be careful!! */this.resetOS=function(){return r.publish((0,o.rpcRequest)([{kind:"factory_reset",args:{package:"farmbot_os"}}]))},/** WARNING: will reset all firmware (hardware) settings! */this.resetMCU=function(){return r.send((0,o.rpcRequest)([{kind:"factory_reset",args:{package:"arduino_firmware"}}]))},this.flashFirmware=function(/** one of: "arduino"|"express_k10"|"farmduino_k14"|"farmduino" */e){return r.send((0,o.rpcRequest)([{kind:"flash_firmware",args:{package:e}}]))},/**
         * Lock the bot from moving (E-STOP). Turns off peripherals and motors. This
         * also will pause running regimens and cause any running sequences to exit.
         */this.emergencyLock=function(){var e=(0,o.rpcRequest)([{kind:"emergency_lock",args:{}}],o.Priority.HIGHEST);return r.send(e)},/** Unlock the bot when the user says it is safe. */this.emergencyUnlock=function(){var e=(0,o.rpcRequest)([{kind:"emergency_unlock",args:{}}],o.Priority.HIGHEST);return r.send(e)},/** Execute a sequence by its ID on the FarmBot API. */this.execSequence=function(e,n){return void 0===n&&(n=[]),r.send((0,o.rpcRequest)([{kind:"execute",args:{sequence_id:e},body:n}]))},/** Run an installed Farmware plugin on the SD Card. */this.execScript=function(/** Name of the Farmware. */e,/** Optional ENV vars to pass the Farmware. */n){return r.send((0,o.rpcRequest)([{kind:"execute_script",args:{label:e},body:n}]))},/** Bring a particular axis (or all of them) to position 0 in Z Y X order. */this.home=function(e){return r.send((0,o.rpcRequest)([{kind:"home",args:e}]))},/** Use end stops or encoders to figure out where 0,0,0 is in Z Y X axis
         * order. WON'T WORK WITHOUT ENCODERS OR END STOPS! A blockage or stall
         * during this command will set that position as zero. Use carefully. */this.findHome=function(e){return r.send((0,o.rpcRequest)([{kind:"find_home",args:e}]))},/** Move FarmBot to an absolute point. */this.moveAbsolute=function(e){var n=e.x,t=e.y,s=e.z,a=e.speed||u.CONFIG_DEFAULTS.speed;return r.send((0,o.rpcRequest)([{kind:"move_absolute",args:{location:(0,i.coordinate)(n,t,s),offset:(0,i.coordinate)(0,0,0),speed:a}}]))},/** Move FarmBot to position relative to its current position. */this.moveRelative=function(e){var n=e.x,t=e.y,i=e.z,s=e.speed||u.CONFIG_DEFAULTS.speed;return r.send((0,o.rpcRequest)([{kind:"move_relative",args:{x:n,y:t,z:i,speed:s}}]))},/** Set a GPIO pin to a particular value. */this.writePin=function(e){return r.send((0,o.rpcRequest)([{kind:"write_pin",args:e}]))},/** Read the value of a GPIO pin. Will create a SensorReading if it's
         * a sensor. */this.readPin=function(e){return r.send((0,o.rpcRequest)([{kind:"read_pin",args:e}]))},/** Reverse the value of a digital pin. */this.togglePin=function(e){return r.send((0,o.rpcRequest)([{kind:"toggle_pin",args:e}]))},/** Read the status of the bot. Should not be needed unless you are first
         * logging in to the device, since the device pushes new states out on
         * every update. */this.readStatus=function(e){return void 0===e&&(e={}),r.send((0,o.rpcRequest)([{kind:"read_status",args:e}]))},/** Snap a photo and send to the API for post processing. */this.takePhoto=function(e){return void 0===e&&(e={}),r.send((0,o.rpcRequest)([{kind:"take_photo",args:e}]))},/** Download/apply all of the latest FarmBot API JSON resources (plants,
         * account info, etc.) to the device. */this.sync=function(e){return void 0===e&&(e={}),r.send((0,o.rpcRequest)([{kind:"sync",args:e}]))},/**
         * Set the current position of the given axis to 0.
         * Example: Sending `bot.setZero("x")` at x: 255 will translate position
         * 255 to 0, causing that position to be x: 0.
         */this.setZero=function(e){return r.send((0,o.rpcRequest)([{kind:"zero",args:{axis:e}}]))},/**
         * Set user ENV vars (usually used by 3rd-party Farmware plugins).
         * Set value to `undefined` to unset.
         */this.setUserEnv=function(e){var n=Object.keys(e).map(function(n){return{kind:"pair",args:{label:n,value:e[n]||d.Misc.NULL}}});return r.send((0,o.rpcRequest)([{kind:"set_user_env",args:{},body:n}]))},this.sendMessage=function(e,n,t){void 0===t&&(t=[]),r.send((0,o.rpcRequest)([{kind:"send_message",args:{message_type:e,message:n},body:t.map(function(e){return{kind:"channel",args:{channel_name:e}}})}]))},/** Control servos on pins 4 and 5. */this.setServoAngle=function(e){var n=r.send((0,o.rpcRequest)([{kind:"set_servo_angle",args:e}]));// Celery script can't validate `pin_number` and `pin_value` the way we need
// for `set_servo_angle`. We will send the RPC command off, but also
// crash the client to aid debugging.
if(![4,5,6,11].includes(e.pin_number))throw Error("Servos only work on pins 4 and 5");if(e.pin_value>180||e.pin_value<0)throw Error("Pin value outside of 0...180 range");return n},/**
         * Find the axis extents using encoder, motor, or end-stop feedback.
         * Will set a new home position and a new axis length for the given axis.
         */this.calibrate=function(e){return r.send((0,o.rpcRequest)([{kind:"calibrate",args:e}]))},this.lua=function(e){return r.send((0,o.rpcRequest)([{kind:"lua",args:{lua:e}}]))},/**
         * Retrieves all of the event handlers for a particular event.
         * Returns an empty array if the event did not exist.
         */this.event=function(e){return r._events[e]=r._events[e]||[],r._events[e]},this.on=function(e,n,t){void 0===t&&(t=!1),r.event(e).push({value:n,once:t,event:e})},this.emit=function(e,n){var t=[];r.event(e).concat(r.event("*")).forEach(function(r){try{r.value(n,e),r.once||r.event!==e||t.push(r)}catch(n){console.warn("Exception thrown while handling '".concat(e,"' event.")),console.dir(n)}}),0===t.length?delete r._events[e]:r._events[e]=t},/** Low-level means of sending MQTT packets. Does not check format. Does not
         * acknowledge confirmation. Probably not the one you want. */this.publish=function(e,n){if(void 0===n&&(n=!0),r.client)r.emit(d.FbjsEventName.sent,e),/** SEE: https://github.com/mqttjs/MQTT.js#client */r.client.publish(r.channel.toDevice,JSON.stringify(e));else if(n)throw Error("Not connected to server")},/** Low-level means of sending MQTT RPC commands to the bot. Acknowledges
         * receipt of message, but does not check formatting. Consider using higher
         * level methods like .moveRelative(), .calibrate(), etc....
        */this.send=function(e){return new Promise(function(n,t){r.publish(e),r.on(e.args.label,function(e){switch(e.kind){case"rpc_ok":return n(e);case"rpc_error":return t(Error("Problem sending RPC command: "+(e.body||[]).map(function(e){return e.args.message}).join(", ")));default:throw console.dir(e),Error("Got a bad CeleryScript node.")}},!0)})},/** Main entry point for all MQTT packets. */this._onmessage=function(e,n){var t=(0,c.bufferToString)(n),o=e.split(d.Misc.MQTT_DELIM),i=r.emit;try{var s=JSON.parse(t);if(o[0]==d.MqttChanName.publicBroadcast)return i(d.MqttChanName.publicBroadcast,s);switch(o[2]){case d.MqttChanName.logs:return i(d.FbjsEventName.logs,s);case d.MqttChanName.status:return i(d.FbjsEventName.status,s);case d.MqttChanName.sync:return i(d.FbjsEventName.sync,s);case d.MqttChanName.pong:return i(o[3],s);default:var a=(0,p.hasLabel)(s)?s.args.label:d.FbjsEventName.malformed;return i(a,s)}}catch(e){console.dir({text:"Could not parse inbound message from MQTT.",error:e}),i(d.FbjsEventName.malformed,t)}},this.ping=function(e,n){return void 0===e&&(e=1e4),void 0===n&&(n=(0,l.timestamp)()),r.setConfig("LAST_PING_OUT",n),r.doPing(n,e)},// STEP 0: Subscribe to `bot/device_23/pong/#`
// STEP 0: Send         `bot/device_23/ping/3123123`
// STEP 0: Receive      `bot/device_23/pong/3123123`
this.doPing=function(e,n){return Promise.race([new Promise(function(e,t){return setTimeout(function(){return t(-0)},n)}),new Promise(function(n,t){r.on(""+e,function(){var t=(0,l.timestamp)();r.setConfig("LAST_PING_IN",t),n(t-e)},!0);var o=r.channel.ping(e);r.client&&r.client.publish(o,JSON.stringify(e))})])},/** Bootstrap the device onto the MQTT broker. */this.connect=function(){var t=r.config,o=t.mqttUsername,i=t.token,s=t.mqttServer,c=d.Misc.RECONNECT_THROTTLE_MS,u=(0,e.connect)(s,{clean:!0,clientId:"FBJS-".concat(n.VERSION,"-").concat((0,a.uuid)()),password:i,protocolId:"MQTT",protocolVersion:4,reconnectPeriod:c,username:o});r.client=u,r.resources=new f.ResourceAdapter(r,r.config.mqttUsername),u.on("message",r._onmessage),u.on("offline",function(){return r.emit(d.FbjsEventName.offline,{})}),u.on("connect",function(){return r.emit(d.FbjsEventName.online,{})});var p=[r.channel.logs,r.channel.status,r.channel.sync,r.channel.toClient,r.channel.pong];return u.subscribe(p),new Promise(function(e,n){if(r.client)r.client.once("connect",function(){return e(r)});else throw Error("Please connect first.")})},this._events={},this.config=(0,u.generateConfig)(t),this.resources=new f.ResourceAdapter(this,this.config.mqttUsername)}return Object.defineProperty(n.prototype,"channel",{/** Dictionary of all relevant MQTT channels the bot uses. */get:function(){var e=this.config.mqttUsername;return{/** From the browser, usually. */toDevice:"bot/".concat(e,"/").concat(d.MqttChanName.fromClients),/** From farmbot */toClient:"bot/".concat(e,"/").concat(d.MqttChanName.fromDevice),status:"bot/".concat(e,"/").concat(d.MqttChanName.status),logs:"bot/".concat(e,"/").concat(d.MqttChanName.logs),sync:"bot/".concat(e,"/").concat(d.MqttChanName.sync,"/#"),/** Read only */pong:"bot/".concat(e,"/pong/#"),/** Write only: bot/${deviceName}/ping/${timestamp} */ping:function(n){return"bot/".concat(e,"/ping/").concat(n)}}},enumerable:!1,configurable:!0}),n.VERSION="15.8.3",n}()}),a("jOzD0",function(e,r){t(e.exports,"stringToBuffer",()=>d),t(e.exports,"bufferToString",()=>l);var o=s("8i5S2"),i=s("byyGl"),a=s("3SNLU"),c=s("4svrT"),u=s("01gfL"),f=s("iwcyJ");function d(e){var n=e.split("").map(function(e){return e.charCodeAt(0)});return new Uint8Array(n)}var p="undefined"!=typeof util&&util.TextDecoder?new util.TextDecoder:"undefined"!=typeof window&&window.TextDecoder?new window.TextDecoder:{decode:function(e){var n=[];return e.forEach(function(e){return n.push(String.fromCharCode(e))}),n.join("")}},l=function(e){return p.decode(e)};n(e.exports,o),n(e.exports,i),n(e.exports,a),n(e.exports,c),n(e.exports,u),n(e.exports,f)}),a("8i5S2",function(e,n){t(e.exports,"coordinate",()=>r);function r(e,n,t){return{kind:"coordinate",args:{x:e,y:n,z:t}}}}),a("byyGl",function(e,n){t(e.exports,"isCeleryScript",()=>o),t(e.exports,"hasLabel",()=>i);var r=function(e){return!!(e&&"object"==typeof e)};function o(e){var n;return r(e)&&"string"==typeof e.kind&&r(n=e)&&!!n.args}function i(e){return!!o(e)&&"string"==typeof e.args.label}}),a("3SNLU",function(e,n){t(e.exports,"isNode",()=>r);function r(){return"undefined"==typeof window}}),a("4svrT",function(e,n){t(e.exports,"pick",()=>r);function r(e,n,t){return e[n]}}),a("01gfL",function(e,n){t(e.exports,"Priority",()=>o),t(e.exports,"rpcRequest",()=>a);var r,o,i=s("iwcyJ");(r=o||(o={}))[r.HIGHEST=9e3]="HIGHEST",r[r.NORMAL=600]="NORMAL",r[r.LOWEST=300]="LOWEST";var a=function(e,n){return void 0===n&&(n=o.NORMAL),{kind:"rpc_request",args:{label:(0,i.uuid)(),priority:n},body:e}}}),a("iwcyJ",function(e,n){t(e.exports,"uuid",()=>r);function r(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var n=16*Math.random()|0;return("x"===e?n:3&n|8).toString(16)})}}),a("f5H0j",function(e,n){t(e.exports,"CONFIG_DEFAULTS",()=>i),t(e.exports,"generateConfig",()=>c),s("jOzD0");var o=s("3SNLU"),i={speed:100},a=function(e){try{return JSON.parse(atob(e.split(".")[1]))}catch(e){throw console.warn(e),Error("Unable to parse token. Is it properly formatted?")}},c=function(e){if((0,o.isNode)()&&!r.atob)throw Error("NOTE TO NODEJS USERS:\n\nThis library requires an 'atob()' function.\nPlease fix this first.\nSOLUTION: https://github.com/FarmBot/farmbot-js/issues/33");var n=a(e.token);return{speed:e.speed||i.speed,token:e.token,secure:!1!==e.secure,mqttServer:(0,o.isNode)()?"mqtt://".concat(n.mqtt,":1883"):n.mqtt_ws,mqttUsername:n.bot||"MISSING_MQTT_USERNAME",LAST_PING_OUT:0,LAST_PING_IN:0}}}),a("dPMce",function(e,n){t(e.exports,"ResourceAdapter",()=>a),s("gwFY1");var r=s("iwcyJ"),o=s("kGTNw"),i=s("d1UZh"),a=function(e,n){var t=this;this.parent=e,this.username=n,this.destroy=function(e){var n=t.parent.client;return n?t.doDestroy(n,e.kind,e.id):(0,i.rejectRpc)()},this.save=function(e){var n=t.parent.client;return n?t.doSave(n,e):(0,i.rejectRpc)()},this.destroyAll=function(e){return Promise.all(e.map(function(e){return t.destroy(e)}))},this.doDestroy=function(e,n,i){return new Promise(function(s,a){var c=(0,r.uuid)();t.parent.on(c,(0,o.resolveOrReject)(s,a)),e.publish((0,o.outboundChanFor)(t.username,"destroy",n,c,i),"")})},this.doSave=function(e,n){return new Promise(function(i,s){var a=(0,r.uuid)();t.parent.on(a,(0,o.resolveOrReject)(i,s));var c=(0,o.outboundChanFor)(t.username,"save",n.kind,a,n.body.id);e.publish(c,JSON.stringify(n.body))})}}}),a("kGTNw",function(e,n){t(e.exports,"outboundChanFor",()=>r),t(e.exports,"internalError",()=>o),t(e.exports,"resolveOrReject",()=>i);var r=function(e,n,t,r,o){return void 0===o&&(o=0),["bot",e,"resources_v0",n,t,r,o].join("/")},o={kind:"rpc_error",args:{label:"BROWSER_LEVEL_FAILURE"},body:[{kind:"explanation",args:{message:"Tried to perform batch operation before connect."}}]},i=function(e,n){return function(t){return("rpc_ok"==t.kind?e:n)(t)}}}),a("d1UZh",function(e,n){t(e.exports,"rejectRpc",()=>o);var r=s("kGTNw"),o=function(){return Promise.reject(r.internalError)}}),a("7tZ6d",function(e,n){var r,o,i,s,a,c;t(e.exports,"MqttChanName",()=>r),t(e.exports,"FbjsEventName",()=>o),t(e.exports,"Misc",()=>i),(s=r||(r={})).fromApi="from_api",s.fromClients="from_clients",s.fromDevice="from_device",s.logs="logs",s.status="status",s.sync="sync",/** THIS ONE IS SPECIAL. */s.publicBroadcast="public_broadcast",s.pong="pong",/** State tree update. */(a=o||(o={})).status="status",/** When a log is received */a.logs="logs",/** When an unexpected message is received */a.malformed="malformed",/** Unreliable. */a.offline="offline",/** Fired on connect. */a.online="online",/** Fires when the API sends an MQTT message to users. */a.publicBroadcast="public_broadcast",/** Fires after any message is sent from current client. */a.sent="sent",/** Used by resource auto-sync. */a.sync="sync",/** When a key is removed from the device state tree. */a.remove="remove",/** Channel delimiter for MQTT channels. */(c=i||(i={})).MQTT_DELIM="/",/** A null value when dealing with empty `pair` nodes in CeleryScript. */c.NULL="null",/** Reconnect interval for MQTT.js */c[c.RECONNECT_THROTTLE_MS=1e3]="RECONNECT_THROTTLE_MS"}),a("aWv1W",function(e,n){t(e.exports,"timestamp",()=>r);/** Returns a timestamp in ms. */function r(){return Math.round(new Date().getTime()/100)}// type RejectFn = (reason?: any) => void;
// type ResolveFn<T> = (value?: T | PromiseLike<T>) => void;
// interface Executor<T> {
//   (x: (resolve: ResolveFn<T>, reject: RejectFn) => void): Promise<T>;
// }
// export function timeoutPromise<T>(time: number, executor: Executor<T>): Promise<T> {
//   return new Promise(executor);
// }
}),a("3tZ8P",function(e,n){var r,o;t(e.exports,"Encoder",()=>r),(o=r||(r={}))[o.unknown=-1]="unknown",o[o.quadrature=0]="quadrature",o[o.differential=1]="differential"}),a("bFr0L",function(e,n){var r,o;t(e.exports,"SpecialStatus",()=>r),/** The local copy is different than the one on the remote end. */(o=r||(r={})).DIRTY="DIRTY",/** The local copy is being saved on the remote end right now? */o.SAVING="SAVING",/** API and FE are in sync. Using "" for now because its falsey like old
     * `undefined` value */o.SAVED=""}),// This is a stub for developers who do not have a module loader or are
// prototyping one-off scripts in a browser.
window.fbjs=s("gwFY1");//# sourceMappingURL=farmbot_single_file.js.map

//# sourceMappingURL=farmbot_single_file.js.map
